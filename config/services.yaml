# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $authLogger: '@monolog.logger.authlog'
            $dbLogger: '@monolog.logger.api_write'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
        
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    ###> API CUSTOM FILTERS ###
    App\Filter\FullTextSearchFilter:
        arguments: [ '@doctrine', ~, '@?logger' ]
        tags: [ 'api_platform.filter' ]
    ###< API CUSTOM FILTERS ###

    ###> AUTH ###
    App\EventListener\Auth\LogoutEventListener:
        tags:
            - name: 'kernel.event_listener'
              event: 'Symfony\Component\Security\Http\Event\LogoutEvent'
              dispatcher: security.event_dispatcher.main

    ###> LEXIK JWT ###
    App\EventListener\Auth\AuthenticationSuccessEventListener:
        class: App\EventListener\Auth\AuthenticationSuccessEventListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
        autowire: true
        
    App\EventListener\Auth\JWTCreatedEventListener:
        class: App\EventListener\Auth\JWTCreatedEventListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }


    App\EventListener\Auth\AuthenticationFailureEventListener:
        class: App\EventListener\Auth\AuthenticationFailureEventListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }
    ###< LEXIK JWT ###

    ###> JWTRefreshTokenBundle ###
    App\EventListener\Auth\RefreshEventListener:
        class: App\EventListener\Auth\RefreshEventListener
        tags:
            - { name: kernel.event_listener, event: gesdinet.refresh_token, method: onTokenRefreshed }

    App\EventListener\Auth\RefreshAuthenticationFailureEventListener:
        class: App\EventListener\Auth\RefreshAuthenticationFailureEventListener
        tags:
            - { name: kernel.event_listener, event: gesdinet.refresh_token_failure, method: onRefreshTokenFailure }
    ###> JWTRefreshTokenBundle ###

    App\EventSubscriber\UserCreateEventSubscriber:
        class: App\EventSubscriber\UserCreateEventSubscriber
        tags:
            - { name: kernel.event_subscriber }

    ###< AUTH ###

    ###> OPENAPI ###
    App\OpenApi\Auth\JwtDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\RefreshJwtDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\LogoutDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\RegistrationConfirmationDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\ResendVerificationEmailDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\ResetPasswordSendEmailDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\ResetPasswordCheckTokenDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\ResetPasswordResetDecorator:
        decorates: 'api_platform.openapi.factory'

    App\OpenApi\Auth\GoogleDecorator:
        decorates: 'api_platform.openapi.factory'
    ###< OPENAPI ###

    ###> MONOLOG ###
    monolog.auth_log_handler:
        class: App\Logger\MonologAuthLogHandler

    monolog.processor.authlog:
        class: App\Logger\Processor\RequestProcessor
        arguments: ['@request_stack', "@security.token_storage"]
        tags:
            - { name: monolog.processor, method: processRecord, handler: authlog }

    monolog.processor.api_write:
        class: App\Logger\Processor\RequestProcessor
        arguments: ['@request_stack', "@security.token_storage"]
        tags:
            - { name: monolog.processor, method: processRecord, handler: api_write }

    App\EventSubscriber\AuthEventSubscriber:
        class: App\EventSubscriber\AuthEventSubscriber
        tags:
            - { name: kernel.event_subscriber }

    App\EventSubscriber\ApiWriteEventSubscriber:
        class: App\EventSubscriber\ApiWriteEventSubscriber
        tags:
            - { name: kernel.event_subscriber }

    monolog.api_write_log_handler:
        class: App\Logger\MonologApiWriteHandler
    ###< MONOLOG ###

    App\Security\GoogleAuthenticator: ~